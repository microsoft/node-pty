# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      node_16_x:
        node_version: 16.x
      node_18_x:
        node_version: 18.x
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)
    displayName: 'Install Node.js'
  - script: |
      npm i
    displayName: 'Install dependencies and build'
  - script: |
      npm test
    displayName: 'Test'
  - script: |
      npm run lint
    displayName: 'Lint'

- job: macOS
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      node_16_x:
        node_version: 16.x
      node_18_x:
        node_version: 18.x
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)
    displayName: 'Install Node.js'
  - script: |
      python3 -m pip install setuptools
    displayName: Install setuptools (macOS)
  - script: |
      npm i
    displayName: 'Install dependencies and build'
  - script: |
      npm test
    displayName: 'Test'
  - script: |
      npm run lint
    displayName: 'Lint'

- job: Windows
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      node_16_x:
        node_version: 16.x
      node_18_x:
        node_version: 18.x
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)
    displayName: 'Install Node.js'
  - script: |
      npm i
    displayName: 'Install dependencies and build'
  - script: |
      npm test
    displayName: 'Test'
  - script: |
      npm run lint
    displayName: 'Lint'

- job: APIScan
  dependsOn: []
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      node_18_x:
        node_version: 18.x
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)
    displayName: 'Install Node.js'
  - pwsh: |
      $includes = @'
        {
          'target_defaults': {
            'conditions': [
              ['OS=="win"', {
                'msvs_settings': {
                  'VCCLCompilerTool': {
                    'AdditionalOptions': [
                      '/Zi',
                      '/FS'
                    ],
                  },
                  'VCLinkerTool': {
                    'AdditionalOptions': [
                      '/profile'
                    ]
                  }
                }
              }]
            ]
          }
        }
      '@

      if (!(Test-Path "~/.gyp")) {
        mkdir "~/.gyp"
        echo $includes > "~/.gyp/include.gypi"
      }
    displayName: Create include.gypi
  - script: |
      npm i
    displayName: 'Install dependencies and build'

  - task: APIScan@2
    inputs:
      softwareFolder: $(Build.SourcesDirectory)\build\Release
      softwareName: 'vscode-node-pty'
      softwareVersionNum: '1'
      isLargeApp: false
      toolVersion: 'Latest'
    displayName: Run ApiScan
    condition: succeeded()
    env:
      AzureServicesAuthConnectionString: $(apiscan-connectionstring)

  - task: PublishSecurityAnalysisLogs@3
    inputs:
      ArtifactName: CodeAnalysisLogs
      ArtifactType: Container
      PublishProcessedResults: false
      AllTools: true

  - task: TSAUpload@2
    inputs:
      GdnPublishTsaOnboard: true
      GdnPublishTsaConfigFile: '$(Build.SourcesDirectory)\tsaoptions.json'

- job: Release
  dependsOn:
  - Linux
  - macOS
  - Windows
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'
  - script: |
      npm i
    displayName: 'Install dependencies and build'
  - script: |
      NPM_AUTH_TOKEN="$(NPM_AUTH_TOKEN)" node ./scripts/publish.js
    displayName: 'Publish to npm'

